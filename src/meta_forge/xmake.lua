
module_name = "meta_forge"
module_name_macro = "META_FORGE"

-- add_requires("vcpkg::llvm", { configs = { shared = true } })

target(module_name)
    set_kind("binary")

    set_group("binary")

    set_runtimes("MD")

    add_files("src/**.cpp")
    add_includedirs("include", { public = true })
    add_headerfiles("include/**.h", { public = true })

    -- local pheader_file = path.join("include", module_name, module_name .. ".h");
    -- set_pcxxheader(pheader_file)

    -- 必须定义
    -- add_defines(module_name_macro .. "_EXPORTS")

    -- 这两个选项同时使用，生成独立的debug符号信息。
    set_symbols("debug")
    set_strip("all")

    add_packages("llvm", "glm", "spdlog", "tbb", "rpmalloc")

    add_deps("core")

    after_load(function (target)
        local pkg = target:pkg("llvm")
        local installdir = pkg:get("installdir")
        target:add("sysincludedirs", installdir .. "/" .. "include")
        target:add("linkdirs", installdir .. "/" .. "lib")
        target:add("links", "clangAST")
        target:add("links", "clangASTMatchers")
        target:add("links", "clangBasic")
        target:add("links", "clangFrontend")
        target:add("links", "clangSerialization")
        target:add("links", "clangTooling")
        -- target:add("links", "llvm-c")
        target:add("links", "ucrt")
        target:add("links", "Ws2_32")
        target:add("links", "llvmaggressiveinstcombine")
        target:add("links", "llvmanalysis")
        target:add("links", "llvmasmparser")
        target:add("links", "llvmasmprinter")
        target:add("links", "llvmbinaryformat")
        target:add("links", "llvmbitreader")
        target:add("links", "llvmbitwriter")
        target:add("links", "llvmbitstreamreader")
        target:add("links", "llvmcfguard")
        target:add("links", "llvmcfiverify")
        target:add("links", "llvmcodegen")
        target:add("links", "llvmcodegentypes")
        target:add("links", "llvmcore")
        target:add("links", "llvmcoroutines")
        target:add("links", "llvmcoverage")
        target:add("links", "llvmdwarflinker")
        target:add("links", "llvmdwarflinkerclassic")
        target:add("links", "llvmdwarflinkerparallel")
        target:add("links", "llvmdwp")
        target:add("links", "llvmdebuginfobtf")
        target:add("links", "llvmdebuginfocodeview")
        target:add("links", "llvmdebuginfodwarf")
        target:add("links", "llvmdebuginfogsym")
        target:add("links", "llvmdebuginfologicalview")
        target:add("links", "llvmdebuginfomsf")
        target:add("links", "llvmdebuginfopdb")
        target:add("links", "llvmdebuginfod")
        target:add("links", "llvmdemangle")
        target:add("links", "llvmdiff")
        target:add("links", "llvmdlltooldriver")
        target:add("links", "llvmexecutionengine")
        target:add("links", "llvmexegesis")
        target:add("links", "llvmexegesisx86")
        target:add("links", "llvmextensions")
        target:add("links", "llvmfilecheck")
        target:add("links", "llvmfrontenddriver")
        target:add("links", "llvmfrontendhlsl")
        target:add("links", "llvmfrontendoffloading")
        target:add("links", "llvmfrontendopenacc")
        target:add("links", "llvmfrontendopenmp")
        target:add("links", "llvmfuzzmutate")
        target:add("links", "llvmfuzzercli")
        target:add("links", "llvmglobalisel")
        target:add("links", "llvmhipstdpar")
        target:add("links", "llvmirprinter")
        target:add("links", "llvmirreader")
        target:add("links", "llvminstcombine")
        target:add("links", "llvminstrumentation")
        target:add("links", "llvminterfacestub")
        target:add("links", "llvminterpreter")
        target:add("links", "llvmjitlink")
        target:add("links", "llvmlto")
        target:add("links", "llvmlibdriver")
        target:add("links", "llvmlineeditor")
        target:add("links", "llvmlinker")
        target:add("links", "llvmmc")
        target:add("links", "llvmmca")
        target:add("links", "llvmmcdisassembler")
        target:add("links", "llvmmcjit")
        target:add("links", "llvmmcparser")
        target:add("links", "llvmmirparser")
        target:add("links", "llvmobjcarcopts")
        target:add("links", "llvmobjcopy")
        target:add("links", "llvmobject")
        target:add("links", "llvmobjectyaml")
        target:add("links", "llvmoption")
        target:add("links", "llvmorcdebugging")
        target:add("links", "llvmorcjit")
        target:add("links", "llvmorcshared")
        target:add("links", "llvmorctargetprocess")
        target:add("links", "llvmpasses")
        target:add("links", "llvmprofiledata")
        target:add("links", "llvmremarks")
        target:add("links", "llvmruntimedyld")
        target:add("links", "llvmscalaropts")
        target:add("links", "llvmselectiondag")
        target:add("links", "llvmsupport")
        target:add("links", "llvmsymbolize")
        target:add("links", "llvmtablegen")
        target:add("links", "llvmtablegencommon")
        target:add("links", "llvmtablegenglobalisel")
        target:add("links", "llvmtarget")
        target:add("links", "llvmtargetparser")
        target:add("links", "llvmtextapi")
        target:add("links", "llvmtextapibinaryreader")
        target:add("links", "llvmtransformutils")
        target:add("links", "llvmvectorize")
        target:add("links", "llvmwindowsdriver")
        target:add("links", "llvmwindowsmanifest")
        target:add("links", "llvmx86asmparser")
        target:add("links", "llvmx86codegen")
        target:add("links", "llvmx86desc")
        target:add("links", "llvmx86disassembler")
        target:add("links", "llvmx86info")
        target:add("links", "llvmx86targetmca")
        target:add("links", "llvmxray")
        target:add("links", "llvmipo")
        target:add("links", "lto")
        target:add("links", "remarks")
        target:add("links", "clangapinotes")
        target:add("links", "clangast")
        target:add("links", "clangastmatchers")
        target:add("links", "clanganalysis")
        target:add("links", "clanganalysisflowsensitive")
        target:add("links", "clanganalysisflowsensitivemodels")
        target:add("links", "clangbasic")
        target:add("links", "clangcodegen")
        target:add("links", "clangcrosstu")
        target:add("links", "clangdependencyscanning")
        target:add("links", "clangdirectorywatcher")
        target:add("links", "clangdriver")
        target:add("links", "clangdynamicastmatchers")
        target:add("links", "clangedit")
        target:add("links", "clangextractapi")
        target:add("links", "clangformat")
        target:add("links", "clangfrontend")
        target:add("links", "clangfrontendtool")
        target:add("links", "clanghandlecxx")
        target:add("links", "clanghandlellvm")
        target:add("links", "clangindex")
        target:add("links", "clangindexserialization")
        target:add("links", "clanginterpreter")
        target:add("links", "clanglex")
        target:add("links", "clangparse")
        target:add("links", "clangrewrite")
        target:add("links", "clangrewritefrontend")
        target:add("links", "clangsema")
        target:add("links", "clangserialization")
        target:add("links", "clangstaticanalyzercheckers")
        target:add("links", "clangstaticanalyzercore")
        target:add("links", "clangstaticanalyzerfrontend")
        target:add("links", "clangsupport")
        target:add("links", "clangtooling")
        target:add("links", "clangtoolingastdiff")
        target:add("links", "clangtoolingcore")
        target:add("links", "clangtoolinginclusions")
        target:add("links", "clangtoolinginclusionsstdlib")
        target:add("links", "clangtoolingrefactoring")
        target:add("links", "clangtoolingsyntax")
        target:add("links", "clangtransformer")
        target:add("links", "libclang")
        target:add("links", "lldcoff")
        target:add("links", "lldcommon")
        target:add("links", "lldelf")
        target:add("links", "lldmacho")
        -- target:add("links", "lldmingw")
        -- target:add("links", "lldwasm")
    end)

    -- after_build(function (target)
    --     for _, pkg in pairs(target:pkgs()) do
    --         local installdir = pkg:installdir()
    --         if installdir then
    --             -- 查找并拷贝所有 DLL/SO/DYLIB 文件
    --             local lib_path = nil;
    --             if is_plat("windows") then
    --                 lib_path = path.join(installdir, "bin/*.dll")
    --             elseif is_plat("macosx") then
    --                 lib_path = path.join(installdir, "lib/*.so*")
    --             elseif is_plat("linux") then
    --                 lib_path = path.join(installdir, "lib/*.so*")
    --             end
    --             local files = os.files(lib_path)
    --             for _, f in ipairs(files) do
    --                 if f then
    --                     os.cp(f, target:targetdir())
    --                     print("on package <" .. pkg:name() .. "> copy " .. f .. " to " .. target:targetdir())
    --                 end
    --             end
    --         end
    --     end
    -- end)