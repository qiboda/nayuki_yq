

add_requires("glfw", "glm", "stb", "spdlog", "tracy", "shaderc", {
    debug = true,
    external = true,
})
add_requires("vulkansdk", { system = true })

-- 获得当前下的所有目录
local curdir = os.curdir()
local dirs = os.dirs(curdir .. "/*")

-- 定义导出模块名列表
local modules = {}

for _, dir in ipairs(dirs) do
    local name = path.filename(dir)
    -- 过滤掉不需要的目录
    table.insert(modules, name)
end

-- 引入其他模块。
for _, module in ipairs(modules) do
    includes(module)
end 

local function camelToUpperUnderscore(name)
    -- 在每个大写前插入下划线（除了第一个字母）
    local underscored = name:gsub("(%u)", function(c)
        return "_" .. c
    end)
    -- 移除最前面的下划线（如果有）并转为大写
    underscored = underscored:gsub("^_", "")
    return underscored:upper()
end

before_build(function ()
    local gen_dir = path.join(os.projectdir(), "build", "generated")
    os.mkdir(gen_dir)

    local content = "#pragma once\n"

    -- 循环生成每个模块的导出宏
    for _, name in ipairs(modules) do
        name_macro = camelToUpperUnderscore(name)
        local macro = name_macro .. "_API"
        local flag  = name_macro .. "_EXPORTS"

        content = content .. string.format([[

// auto-generated by xmake for module: %s
#if defined(_WIN32) || defined(_WIN64)
#ifdef %s
#   define %s __declspec(dllexport)
#else
#   define %s __declspec(dllimport)
#endif
#else // defined(_WIN32) || defined(_WIN64)
#   define %s __attribute__ ((visibility("default")))
#endif // defined(_WIN32) || defined(_WIN64)

]], name, flag, macro, macro, macro)
    end

    local file_path = path.join(gen_dir, "module_export.h")
    io.writefile(file_path, content)
end)
